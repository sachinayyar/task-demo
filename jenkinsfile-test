pipeline {
    agent {
        kubernetes{
            label 'java21'
            defaultContainer 'jnlp'
        }
    }
    environment {
        //SONARQUBE_SERVER = 'sonar'  
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')  
        IMAGE_NAME = 'ayyarsachin/simpleproj'
    }
    stages {
        stage('checkout') {
            steps {
                checkout scm
            }
        }         
        stage('Maven Build') {
            steps {
            sh '''
                mvn -version
                mvn clean install
            '''
            }
        }

        stage('Build and Deploy') {
            steps {
                configFileProvider([configFile(fileId: 'custom-nexus-settings', variable: 'MAVEN_SETTINGS')]) {
                    withCredentials([usernamePassword(credentialsId: 'nexus-cred', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh """
                            cat $MAVEN_SETTINGS
                            mvn clean deploy -s $MAVEN_SETTINGS -DskipTests
                        """
                    }
                }
            }
        }

        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('sonar') {  
        //             sh 'mvn sonar:sonar' 
        //         }
        //     }
        // }
        stage('Build Image') {
            steps {
                sh '''
                buildah --version
                buildah --storage-driver=overlay bud -t ${IMAGE_NAME}:${BUILD_NUMBER} .

                '''
            }
        }

        stage('Login and Push Image') {
            steps {
                sh '''
                echo $DOCKERHUB_CREDENTIALS_PSW | buildah login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin docker.io
                buildah push --storage-driver=overlay ${IMAGE_NAME}:${BUILD_NUMBER} docker://docker.io/${IMAGE_NAME}:${BUILD_NUMBER}
                buildah rmi ${IMAGE_NAME}:${BUILD_NUMBER}
                '''
            }
        }

        stage('Vulnarability Scan with Trivy') {
            steps {
                sh """
                # Scan the image directly from Docker Hub (or your registry)
                trivy image --severity CRITICAL,HIGH --exit-code 0 --no-progress docker.io/${IMAGE_NAME}:${BUILD_NUMBER}
                """
            }
        }

        stage('Deployment confirmation for staging env') {
            steps {
                script{
                    input message: 'Do you want to deploy the application in staging environment?'
                }
            }
        }

        stage('Deployment in staging environment') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh '''
                        set -e
                        git config --global user.email "ayyarsachin@gmail.com"
                        git config --global user.name "$USERNAME"
                        
                        echo "Removing any old cloned repo"
                        rm -rf task-demo
                        
                        echo "Cloning GitHub repository"
                        git clone -b staging https://$USERNAME:$PASSWORD@github.com/sachinayyar/task-demo.git
                        cd task-demo/manifest
        
                        echo "Updating image tag in Deployment.yaml"
                        sed -i "s|image: ayyarsachin/simpleproj:[^[:space:]]*|image: ayyarsachin/simpleproj:${BUILD_NUMBER}|" Deployment.yaml
        
                        echo "Verifying updated Deployment.yaml"
                        cat Deployment.yaml
        
                        git add Deployment.yaml
                        git commit -m "Update image tag to build ${BUILD_NUMBER}"
                        git push https://$USERNAME:$PASSWORD@github.com/sachinayyar/task-demo.git
                        '''
                    }
                }
            }
        }
    }
}
